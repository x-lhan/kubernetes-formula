mine_functions:
  network.internal_ip:
    - mine_function: grains.get
    {% if grains['id'].startswith('k8s') %}
    - 'ip_interfaces:eth0:0'
    {% elif grains['id'].startswith('stage-k8s') %}
    - 'ip_interfaces:eth1:0'
    {% endif %}

# default k8s cluster environment.
kubernetes:
  k8s_env: defaults
  # scope master/pool nodes by minion_id
  {% if grains['id'].startswith('k8s-master') %}
  master: True
  {% elif grains['id'].startswith('k8s-pool') %}
  pool: True
  {% endif %}

  # which host interface to bind, default eth0. when changed please make sure mine funcation "network.internal_ip" is also changed
  bind_iface: eth0

  # Override default token for security practice
  token:
    admin: REPLACE_ME_WITH_BASE64_TOKEM_FOR_ADMIN
    kube_proxy: REPLACE_ME_WITH_BASE64_TOKEM_FOR_KUBE_PROXY
    kubelet:  REPLACE_ME_WITH_BASE64_TOKEM_FOR_KUBELET

  # please use "kuberentes.cert.configured" and "kuberentes.cert.view" state to fill this part
  # or reuse existing certs
  certs:

  # Please reference default.yml file for more configurable pillar data 

# Stage k8s cluster environment. please add grain to all nodes with "k8s_env" as key and environment name as value
# e.g. for stage k8s cluster: salt "ALL_STAGE_NODES" grains.set k8s_env stage
kubernetes:
  k8s_env: stage
  # scope master/pool nodes by minion_id
  {% if grains['id'].startswith('stage-k8s-master') %}
  master: True
  {% elif grains['id'].startswith('stage-k8s-pool') %}
  pool: True
  {% endif %}
  
  # please use "kuberentes.cert.configured" and "kuberentes.cert.view" state to fill this part
  certs:
  
  # which host interface to bind, default eth0. when changed please make sure mine funcation "network.internal_ip" is also changed
  bind_iface: eth1
